<Type Name="AddinManager" FullName="Mono.Addins.AddinManager">
  <TypeSignature Language="C#" Value="public class AddinManager" />
  <AssemblyInfo>
    <AssemblyName>Mono.Addins</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Members>
    <Member MemberName="CreateExtensionContext">
      <MemberSignature Language="C#" Value="public static Mono.Addins.ExtensionContext CreateExtensionContext ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Mono.Addins.ExtensionContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new extension context.</summary>
        <returns>The new extension context.</returns>
        <remarks>Extension contexts can be used to query the extension tree using particular condition values. See <see cref="T:Mono.Addins.ExtensionContext" /> for a complete example.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtensionChanged">
      <MemberSignature Language="C#" Value="public static event Mono.Addins.ExtensionEventHandler ExtensionChanged;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>Mono.Addins.ExtensionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExtensionNode">
      <MemberSignature Language="C#" Value="public static Mono.Addins.ExtensionNode GetExtensionNode (string path);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Mono.Addins.ExtensionNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Location of the node.</param>
        <summary>Returns the extension node in a path</summary>
        <returns>The node, or null if not found.</returns>
        <remarks>
          <para>This method returns the extension node located at the provided path. For example, given the following extension point:</para>
          <example>
            <code lang="XML">
	&lt;Extension path="/MonoDevelop/Workbench/MainMenu"&gt;
		&lt;ItemSet id="File" _label="_File"&gt;
			&lt;CommandItem id="NewFile" /&gt;
			&lt;CommandItem id="NewProject" /&gt;
		&lt;/ItemSet&gt;
	&lt;/Extension&gt;
	</code>
          </example>
          <para> The following calls are valid: </para>
          <example>
            <code lang="C#">
// The following call returns the root element of the extension point
ExtensionNode node = AddinManager.GetExtensionNode ("/MonoDevelop/Workbench/MainMenu");

// The following call returns an specific node of the extension point
ExtensionNode node = AddinManager.GetExtensionNode ("/MonoDevelop/Workbench/MainMenu/File");

// The following call returns a child of a node of the extension point
ExtensionNode node = AddinManager.GetExtensionNode ("/MonoDevelop/Workbench/MainMenu/File/NewProject");
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExtensionObjects">
      <MemberSignature Language="C#" Value="public static object[] GetExtensionObjects (string path);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">An extension path.</param>
        <summary>Gets extension objects registered in a path.</summary>
        <returns>An array of objects registered in the path.</returns>
        <remarks>This method can only be used if all nodes in the provided extension path are of type <see cref="T:Mono.Addins.TypeExtensionNode" />. The returned objects
are created by calling <see cref="M:Mono.Addins.TypeExtensionNode.GetInstance()" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExtensionObjects">
      <MemberSignature Language="C#" Value="public static object[] GetExtensionObjects (string path, bool reuseCachedInstance);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="reuseCachedInstance" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">An extension path.</param>
        <param name="reuseCachedInstance">True if the method can reuse instances created in previous calls.</param>
        <summary>Gets extension objects registered in a path.</summary>
        <returns>An array of objects registered in the path.</returns>
        <remarks>This method can only be used if all nodes in the provided extension path are of type <see cref="T:Mono.Addins.TypeExtensionNode" />. The returned array is composed by all objects created by calling the <see cref="M:Mono.Addins.TypeExtensionNode.CreateInstance()" /> method for each node (or <see cref="M:Mono.Addins.TypeExtensionNode.GetInstance()" /> if reuseCachedInstance is set to true).</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExtensionObjects">
      <MemberSignature Language="C#" Value="public static object[] GetExtensionObjects (string path, Type arrayElementType);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="arrayElementType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="path">An extension path.</param>
        <param name="arrayElementType">Type of the return array elements.</param>
        <summary>Gets extension objects registered in a path.</summary>
        <returns>An array of objects registered in the path.</returns>
        <remarks>This method can only be used if all nodes in the provided extension path are of type <see cref="T:Mono.Addins.TypeExtensionNode" />. The returned objects
are created by calling <see cref="M:Mono.Addins.TypeExtensionNode.GetInstance(System.Type)" />.

<para>
A <see cref="T:System.InvalidOperationException" /> exception is thrown if one of the found objects is not a subclass of the provided type.
</para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExtensionObjects">
      <MemberSignature Language="C#" Value="public static object[] GetExtensionObjects (string path, Type arrayElementType, bool reuseCachedInstance);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="arrayElementType" Type="System.Type" />
        <Parameter Name="reuseCachedInstance" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">An extension path.</param>
        <param name="arrayElementType">Type of the return array elements.</param>
        <param name="reuseCachedInstance">True if the method can reuse instances created in previous calls.</param>
        <summary>Gets extension objects registered in a path.</summary>
        <returns>An array of objects registered in the path.</returns>
        <remarks>This method can only be used if all nodes in the provided extension path are of type <see cref="T:Mono.Addins.TypeExtensionNode" />. The returned array is composed by all objects created by calling the <see cref="M:Mono.Addins.TypeExtensionNode.CreateInstance(System.Type)" /> method for each node (or <see cref="M:Mono.Addins.TypeExtensionNode.GetInstance(System.Type)" /> if reuseCachedInstance is set to true).

<para>
A <see cref="T:System.InvalidOperationException" /> exception is thrown if one of the found objects is not a subclass of the provided type.
</para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExtensionObjects">
      <MemberSignature Language="C#" Value="public static object[] GetExtensionObjects (Type instanceType);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="instanceType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>This method can only be used if all nodes in the provided extension path are of type <see cref="T:Mono.Addins.TypeExtensionNode" />. The returned array is composed by all objects created by calling the <see cref="M:Mono.Addins.TypeExtensionNode.GetInstance(System.Type)" /> method for each node.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExtensionObjects">
      <MemberSignature Language="C#" Value="public static object[] GetExtensionObjects (Type instanceType, bool reuseCachedInstance);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceType" Type="System.Type" />
        <Parameter Name="reuseCachedInstance" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="instanceType">To be added.</param>
        <param name="reuseCachedInstance">True if the method can reuse instances created in previous calls.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExtensionNodes">
      <MemberSignature Language="C#" Value="public static Mono.Addins.ExtensionNodeList GetExtensionNodes (string path);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Mono.Addins.ExtensionNodeList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">An extension path.</param>
        <summary>Gets extension nodes registered in a path.</summary>
        <returns>All nodes registered in the provided path.</returns>
        <remarks>
          <para>This method returns all nodes registered under the provided path. For example, given the following extension point:</para>
          <example>
            <code lang="XML">
	&lt;Extension path="/MonoDevelop/Workbench/MainMenu"&gt;
		&lt;ItemSet id="File" _label="_File"&gt;
			&lt;CommandItem id="NewFile" /&gt;
			&lt;CommandItem id="NewProject" /&gt;
		&lt;/ItemSet&gt;
		&lt;ItemSet id="Edit" _label="_Edit"/&gt;
		&lt;ItemSet id="View" _label="_View"/&gt;
	&lt;/Extension&gt;
	</code>
          </example>
          <para> The following calls are valid: </para>
          <example>
            <code lang="C#">
// The following call prints 'File', 'Edit' and 'View'
ExtensionNodeList nodes = AddinManager.GetExtensionNodes ("/MonoDevelop/Workbench/MainMenu");
foreach (ExtensionNode node in nodes)
	Console.WriteLine (node.Id);

// The following call prints 'NewFile' and 'NewProject'
nodes = AddinManager.GetExtensionNode ("/MonoDevelop/Workbench/MainMenu/File");
foreach (ExtensionNode node in nodes)
	Console.WriteLine (node.Id);
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExtensionNodes">
      <MemberSignature Language="C#" Value="public static Mono.Addins.ExtensionNodeList GetExtensionNodes (string path, Type type);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Mono.Addins.ExtensionNodeList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="path">An extension path.</param>
        <param name="type">Expected node type.</param>
        <summary>Gets extension nodes registered in a path.</summary>
        <returns>All nodes registered in the provided path.</returns>
        <remarks>This method returns all nodes registered under the provided path.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public static void Initialize ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public static void Initialize (string configDir);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configDir" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="configDir">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAddinLoaded">
      <MemberSignature Language="C#" Value="public static bool IsAddinLoaded (string id);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public static void Shutdown ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddExtensionNodeHandler">
      <MemberSignature Language="C#" Value="public static void AddExtensionNodeHandler (string path, Mono.Addins.ExtensionNodeEventHandler handler);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="handler" Type="Mono.Addins.ExtensionNodeEventHandler" />
      </Parameters>
      <Docs>
        <param name="path">Path of the node.</param>
        <param name="handler">Handler.</param>
        <summary>Register a listener of extension node changes.</summary>
        <remarks>This method registers a delegate to be called when a node is added to or removed from the provided extension path.

<block subset="none" type="note"><para>
The handler will be called for all nodes existing in the path at the moment of registration.
  </para></block></remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveExtensionNodeHandler">
      <MemberSignature Language="C#" Value="public static void RemoveExtensionNodeHandler (string path, Mono.Addins.ExtensionNodeEventHandler handler);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="handler" Type="Mono.Addins.ExtensionNodeEventHandler" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="handler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddExtensionNodeHandler">
      <MemberSignature Language="C#" Value="public static void AddExtensionNodeHandler (string path, Mono.Addins.ExtensionNodeEventHandler handler);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="handler" Type="Mono.Addins.ExtensionNodeEventHandler" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="handler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveExtensionNodeHandler">
      <MemberSignature Language="C#" Value="public static void RemoveExtensionNodeHandler (string path, Mono.Addins.ExtensionNodeEventHandler handler);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="handler" Type="Mono.Addins.ExtensionNodeEventHandler" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="handler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddinLoaded">
      <MemberSignature Language="C#" Value="public static event Mono.Addins.AddinEventHandler AddinLoaded;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>Mono.Addins.AddinEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddinLoadError">
      <MemberSignature Language="C#" Value="public static event Mono.Addins.AddinErrorEventHandler AddinLoadError;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>Mono.Addins.AddinErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddinUnloaded">
      <MemberSignature Language="C#" Value="public static event Mono.Addins.AddinEventHandler AddinUnloaded;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>Mono.Addins.AddinEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Registry">
      <MemberSignature Language="C#" Value="public static Mono.Addins.AddinRegistry Registry { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Mono.Addins.AddinRegistry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitialized">
      <MemberSignature Language="C#" Value="public static bool IsInitialized { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAddin">
      <MemberSignature Language="C#" Value="public static void LoadAddin (Mono.Addins.IProgressStatus statusMonitor, string id);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statusMonitor" Type="Mono.Addins.IProgressStatus" />
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="statusMonitor">To be added.</param>
        <param name="id">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
  <Docs>
    <summary>Provides access to add-in management operations.</summary>
    <remarks>To be added.</remarks>
  </Docs>
</Type>
